# syntax=docker/dockerfile:1.4

# Budowa aplikacji Node.js
FROM node:18-alpine as build-stage

# Użycie BuildKit secret do klonowania repo przez SSH
RUN apk add --no-cache openssh git

# Dodanie klucza SSH jako secret
# Klonowanie repozytorium pawcho6 przez SSH
RUN --mount=type=secret,id=ssh_key \
    mkdir -p ~/.ssh && \
    chmod 700 ~/.ssh && \
    cp /run/secrets/ssh_key ~/.ssh/id_rsa && \
    chmod 600 ~/.ssh/id_rsa && \
    ssh-keyscan github.com >> ~/.ssh/known_hosts && \
    git clone git@github.com:jakubdziem/pawcho6.git /usr/app

# Ustawienie katalogu roboczego
WORKDIR /usr/app

# Instalacja zależności
#maybe get rid off
RUN npm install

# Etap 2: Konfiguracja serwera Nginx + Node.js
FROM nginx:latest

# Instalacja narzędzi do obsługi Node.js
RUN apt update && apt install -y curl nodejs npm

# Ustawienie katalogu roboczego
WORKDIR /usr/app

# Kopiowanie aplikacji Node.js
COPY --from=build-stage /usr/app /usr/app

# Kopiowanie konfiguracji Nginx
COPY default.conf /etc/nginx/conf.d/default.conf

# Eksponowanie portów
EXPOSE 80 8080

ARG VERSION

ENV APP_VERSION=${VERSION}

# Dodanie HEALTHCHECK do sprawdzania dostępności serwisów
HEALTHCHECK --interval=10s --timeout=5s\
    CMD curl -f http://localhost:80 || exit 1

# Uruchomienie aplikacji Node.js oraz serwera Nginx
CMD ["sh", "-c", "node /usr/app/index.js & nginx -g 'daemon off;'"]
